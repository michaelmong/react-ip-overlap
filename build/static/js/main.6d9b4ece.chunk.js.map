{"version":3,"sources":["Ip_hook.js","serviceWorker.js","index.js"],"names":["App","useState","ip","setIp","iplist1","setIplist1","iplist2","setIplist2","iplist3","setIplist3","iplist4","setIplist4","ip1","setIp1","mask1","setMask1","ip2","setIp2","mask2","setMask2","ip3","setIp3","mask3","setMask3","ip4","setIp4","mask4","setMask4","queryResult","setQueryResult","ValidateIPaddress","ipaddress","ipArray","Array","split","ValidateNetworkAddress","netaddress","mask","num","numDec","rest","can","i","useEffect","iplist1DecMin","iplist2DecMin","iplist3DecMin","iplist4DecMin","iplist1DecMax","iplist2DecMax","iplist3DecMax","iplist4DecMax","ipTyping","ip1234","ipDec","iplist1x1234","iplist2x1234","iplist3x1234","iplist4x1234","Math","pow","found","queryMessage","test","className","value","onChange","event","target","style","fontSize","border","cellPadding","cellSpacing","width","size","maskTesting","onClick","iplistUpdate","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","para1","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d9b4ece.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    const [ip, setIp] = useState(\"10.10.10.10\");\r\n    const [iplist1, setIplist1] = useState([\"172.16.15.64\", \"26\"]);\r\n    const [iplist2, setIplist2] = useState([\"172.16.15.128\", \"25\"]);\r\n    const [iplist3, setIplist3] = useState([\"10.10.10.0\", \"23\"]);\r\n    const [iplist4, setIplist4] = useState([\"1.2.3.4\", \"32\"]);\r\n    const [ip1, setIp1] = useState(\"172.16.15.64\");\r\n    const [mask1, setMask1] = useState(\"26\");\r\n    const [ip2, setIp2] = useState(\"172.16.15.128\");\r\n    const [mask2, setMask2] = useState(\"25\");\r\n    const [ip3, setIp3] = useState(\"10.10.10.0\");\r\n    const [mask3, setMask3] = useState(\"23\");\r\n    const [ip4, setIp4] = useState(\"1.2.3.4\");\r\n    const [mask4, setMask4] = useState(\"32\");\r\n    const [queryResult, setQueryResult] = useState(\"\");\r\n\r\n\r\n    function ValidateFullIPaddress(ipaddress) {\r\n        if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {\r\n            return (true);\r\n        } else {\r\n            return (false);\r\n        }\r\n    }\r\n\r\n\r\n    function ValidateIPaddress(ipaddress) {\r\n        let ipArray = new Array;\r\n        ipArray = ipaddress.split(\".\");\r\n        if ((ipArray[0] > 255) || (ipArray[1] > 255) || (ipArray[2] > 255) || (ipArray[3] > 255)){\r\n            return(false);\r\n        } else {\r\n            return(true);\r\n        }\r\n    }\r\n\r\n    function handleOnChange(event) {\r\n        let ipTesting = event.target.value;\r\n        if (ValidateIPaddress(ipTesting)) { setIp(event.target.value); }\r\n    };\r\n\r\n    function ValidateNetworkAddress(netaddress, mask) {\r\n        let num = new Array;\r\n        let numDec = 0;\r\n        let rest = 32 - mask;\r\n        let can = true;\r\n        num = netaddress.split(\".\");\r\n        numDec = num[0]*256*256*256 + num[1]*256*256 + num[2]*256 + num[3]*1;\r\n\r\n        for (let i = 1; i <= rest; i++) {\r\n            if ((numDec % 2) == 1) { can = false; }\r\n            numDec /= 2;\r\n        }\r\n\r\n        return can;\r\n    }\r\n\r\n    function handle1OnClick(event) {\r\n        let iplistUpdate = new Array;\r\n        iplistUpdate[0] = ip1;\r\n        iplistUpdate[1] = mask1;\r\n        \r\n        if (ValidateNetworkAddress(iplistUpdate[0], iplistUpdate[1])) {\r\n            setIplist1(iplistUpdate);\r\n        } else {\r\n            alert(\"Impossible network address \" + iplistUpdate[0] + \" with subnet mask \" + iplistUpdate[1]);\r\n        }\r\n    };\r\n\r\n    function handleIP1OnChange(event) {\r\n        let ipTesting = event.target.value;\r\n        if (ValidateIPaddress(ipTesting)) { setIp1(event.target.value); }\r\n    };\r\n\r\n    function handleMask1OnChange(event) {\r\n        let maskTesting = event.target.value;\r\n        if ((maskTesting >= 0) && (maskTesting <= 32)) { setMask1(event.target.value); }\r\n    };\r\n\r\n    function handle2OnClick(event) {\r\n        let iplistUpdate = new Array;\r\n        iplistUpdate[0] = ip2;\r\n        iplistUpdate[1] = mask2;\r\n        \r\n        if (ValidateNetworkAddress(iplistUpdate[0], iplistUpdate[1])) {\r\n            setIplist2(iplistUpdate);\r\n        } else {\r\n            alert(\"Impossible network address \" + iplistUpdate[0] + \" with subnet mask \" + iplistUpdate[1]);\r\n        }\r\n    };\r\n\r\n    function handleIP2OnChange(event) {\r\n        let ipTesting = event.target.value;\r\n        if (ValidateIPaddress(ipTesting)) { setIp2(event.target.value); }\r\n    };\r\n\r\n    function handleMask2OnChange(event) {\r\n        let maskTesting = event.target.value;\r\n        if ((maskTesting >= 0) && (maskTesting <= 32)) { setMask2(event.target.value); }\r\n    };\r\n\r\n    function handle3OnClick(event) {\r\n        let iplistUpdate = new Array;\r\n        iplistUpdate[0] = ip3;\r\n        iplistUpdate[1] = mask3;\r\n        \r\n        if (ValidateNetworkAddress(iplistUpdate[0], iplistUpdate[1])) {\r\n            setIplist3(iplistUpdate);\r\n        } else {\r\n            alert(\"Impossible network address \" + iplistUpdate[0] + \" with subnet mask \" + iplistUpdate[1]);\r\n        }\r\n    };\r\n\r\n    function handleIP3OnChange(event) {\r\n        let ipTesting = event.target.value;\r\n        if (ValidateIPaddress(ipTesting)) { setIp3(event.target.value); }\r\n    };\r\n\r\n    function handleMask3OnChange(event) {\r\n        let maskTesting = event.target.value;\r\n        if ((maskTesting >= 0) && (maskTesting <= 32)) { setMask3(event.target.value); }\r\n    };\r\n\r\n    function handle4OnClick(event) {\r\n        let iplistUpdate = new Array;\r\n        iplistUpdate[0] = ip4;\r\n        iplistUpdate[1] = mask4;\r\n        \r\n        if (ValidateNetworkAddress(iplistUpdate[0], iplistUpdate[1])) {\r\n            setIplist4(iplistUpdate);\r\n        } else {\r\n            alert(\"Impossible network address \" + iplistUpdate[0] + \" with subnet mask \" + iplistUpdate[1]);\r\n        }\r\n    };\r\n\r\n    function handleIP4OnChange(event) {\r\n        let ipTesting = event.target.value;\r\n        if (ValidateIPaddress(ipTesting)) { setIp4(event.target.value); }\r\n    };\r\n\r\n    function handleMask4OnChange(event) {\r\n        let maskTesting = event.target.value;\r\n        if ((maskTesting >= 0) && (maskTesting <= 32)) { setMask4(event.target.value); }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let ipTyping = ip;\r\n        let ip1234 = new Array;\r\n        let ipDec = 0;\r\n        let iplist1x1234 = new Array;\r\n        let iplist2x1234 = new Array;\r\n        let iplist3x1234 = new Array;\r\n        let iplist4x1234 = new Array;\r\n        let iplist1DecMin = 0;\r\n        let iplist2DecMin = 0;\r\n        let iplist3DecMin = 0;\r\n        let iplist4DecMin = 0;\r\n        let iplist1DecMax = 0;\r\n        let iplist2DecMax = 0;\r\n        let iplist3DecMax = 0;\r\n        let iplist4DecMax = 0;\r\n\r\n        ip1234 = ipTyping.split(\".\");\r\n\r\n        if (ip1234[3]) {\r\n            ipDec = ip1234[0]*256*256*256 + ip1234[1]*256*256 + ip1234[2]*256 + ip1234[3]*1;\r\n        }\r\n        \r\n        iplist1x1234 = iplist1[0].split(\".\");\r\n        iplist1DecMin = iplist1x1234[0]*256*256*256 + iplist1x1234[1]*256*256 + iplist1x1234[2]*256 + iplist1x1234[3]*1;\r\n        iplist1DecMax = iplist1DecMin + Math.pow(2, 32-iplist1[1])-1;\r\n\r\n        iplist2x1234 = iplist2[0].split(\".\");\r\n        iplist2DecMin = iplist2x1234[0]*256*256*256 + iplist2x1234[1]*256*256 + iplist2x1234[2]*256 + iplist2x1234[3]*1;\r\n        iplist2DecMax = iplist2DecMin + Math.pow(2, 32-iplist2[1])-1;\r\n\r\n        iplist3x1234 = iplist3[0].split(\".\");\r\n        iplist3DecMin = iplist3x1234[0]*256*256*256 + iplist3x1234[1]*256*256 + iplist3x1234[2]*256 + iplist3x1234[3]*1;\r\n        iplist3DecMax = iplist3DecMin + Math.pow(2, 32-iplist3[1])-1;\r\n\r\n        iplist4x1234 = iplist4[0].split(\".\");\r\n        iplist4DecMin = iplist4x1234[0]*256*256*256 + iplist4x1234[1]*256*256 + iplist4x1234[2]*256 + iplist4x1234[3]*1;\r\n        iplist4DecMax = iplist4DecMin + Math.pow(2, 32-iplist4[1])-1;\r\n\r\n        let found = 0;\r\n        let queryMessage = \"Seaching \" + ip + \"...\";\r\n        if ((ipDec >= iplist1DecMin) && (ipDec <= iplist1DecMax)) { \r\n            if (found >= 1) { queryMessage += \", \" } else { queryMessage += \"found in \" };\r\n            queryMessage += \"list1\";\r\n            found++;\r\n        };\r\n        if ((ipDec >= iplist2DecMin) && (ipDec <= iplist2DecMax)) {\r\n            if (found >= 1) { queryMessage += \", \" } else { queryMessage += \"found in \" };\r\n            queryMessage += \"list2\";\r\n            found++;\r\n        };\r\n        if ((ipDec >= iplist3DecMin) && (ipDec <= iplist3DecMax)) {\r\n            if (found >= 1) { queryMessage += \", \" } else { queryMessage += \"found in \" };\r\n            queryMessage += \"list3\";\r\n            found++;\r\n        };\r\n        if ((ipDec >= iplist4DecMin) && (ipDec <= iplist4DecMax)) {\r\n            if (found >= 1) { queryMessage += \", \" } else { queryMessage += \"found in \" };\r\n            queryMessage += \"list4\";\r\n            found++;\r\n        };\r\n\r\n        if (found == 0) { queryMessage += \"not found\" }\r\n\r\n        if ((ipTyping == \"\") || !(ValidateFullIPaddress(ipTyping))) { queryMessage = \"\"; }\r\n\r\n        setQueryResult(queryMessage)\r\n    });\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div>IP Address:</div><input value={ip} onChange={handleOnChange} />\r\n          <div style={{fontSize:14}}>{queryResult}</div>\r\n        </header>\r\n        <article className=\"App-article\">\r\n          <div></div>\r\n          <table border=\"1\" cellPadding=\"2\" cellSpacing=\"3\">\r\n              <tr>\r\n                  <td width=\"25%\"><b>IP List Name</b></td>\r\n                  <td width=\"25%\"><b>IP Address</b></td>\r\n                  <td width=\"25%\"><b>Mask</b></td>\r\n                  <td width=\"25%\"><b>Need to change?</b></td>\r\n              </tr>\r\n              <tr>\r\n                  <td>list1</td>\r\n                  <td>{iplist1[0]}</td>\r\n                  <td>{iplist1[1]}</td>\r\n                  <td><input value={ip1} size=\"15\" onChange={handleIP1OnChange} />/<input value={mask1} size=\"2\" onChange={handleMask1OnChange} /><button onClick={handle1OnClick}>update</button></td>\r\n              </tr>\r\n              <tr>\r\n                  <td>list2</td>\r\n                  <td>{iplist2[0]}</td>\r\n                  <td>{iplist2[1]}</td>\r\n                  <td><input value={ip2} size=\"15\" onChange={handleIP2OnChange} />/<input value={mask2} size=\"2\" onChange={handleMask2OnChange} /><button onClick={handle2OnClick}>update</button></td>\r\n              </tr>\r\n              <tr>\r\n                  <td>list3</td>\r\n                  <td>{iplist3[0]}</td>\r\n                  <td>{iplist3[1]}</td>\r\n                  <td><input value={ip3} size=\"15\" onChange={handleIP3OnChange} />/<input value={mask3} size=\"2\" onChange={handleMask3OnChange} /><button onClick={handle3OnClick}>update</button></td>\r\n              </tr>\r\n              <tr>\r\n                  <td>list4</td>\r\n                  <td>{iplist4[0]}</td>\r\n                  <td>{iplist4[1]}</td>\r\n                  <td><input value={ip4} size=\"15\" onChange={handleIP4OnChange} />/<input value={mask4} size=\"2\" onChange={handleMask4OnChange} /><button onClick={handle4OnClick}>update</button></td>\r\n              </tr>\r\n          </table>\r\n        </article>\r\n        <footer className=\"App-footer\">\r\n          <div>Script by Mongkol Thamwongskul. Powered by React.</div>\r\n        </footer>\r\n      </div>\r\n    )\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Ip_hook';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App para1=\"555\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}